#%RAML 0.8
title: preview-spec-core
version: v0.1
baseUri: http://localhost:8080/
protocols: [ HTTP, HTTPS ]
mediaType:  application/json
securedBy: [oauth_2_0]

documentation:
  - title: Home
    content: | #This is a prototype API.
  - title: Getting Started
    content: TODO

securitySchemes:
  - basic:
      type: Basic Authentication
  - oauth_2_0:
      description: |
        OAuth2 is a protocol that lets external apps request authorization to private
        details. This is preferred over Basic Authentication because tokens can be limited to specific
        types of data, and can be revoked by users at any time.
      type: OAuth 2.0
      describedBy:
        headers:
          Authorization:
            description: |
              Used to send a valid OAuth 2 access token. Do not use together with
              the "access_token" query string parameter.
            type: string
        queryParameters:
          access_token:
            description: |
              Used to send a valid OAuth 2 access token. Do not use together with
              the "Authorization" header
            type: string
        responses:
          404:
            description: Unauthorized
      settings:
        authorizationUri: https://localhost:8080/login/oauth/authorize
        accessTokenUri: https://localhost:8080/login/oauth/access_token
        authorizationGrants: [ code ]

traits:
  - localized:
      headers:
        Accept-Language:
          description: The response messages are localized according to the set header value. English and german translations can be provided. Unsupported languages will fallback to english.
  - perm_listable:
      queryParameters:
        perms:
          description: Include user permissions on the object.
          type: boolean
          required: false
  - nested:
      queryParameters:
        depth:
          description: Limit the depth of nested data in the response.
          type: number
  - sortable:
      queryParameters:
        orderBy:
          description: Set the attribute by which the results should be ordered.

  - paged:
      queryParameters:
        page:
          description: The page to be displayed. Please note that page numbering is 1-based and that omitting the page parameter will return the first page 1.
          type: number
        per_page: 
          description: The page size. A page size of 25 will be used when this parameter is omitted.
          type: number

  - pagedHeader:
      responses:
        200:
          headers:
             Link:
               description: |
                        A link header will be provided accoring to [RFC5988](http://tools.ietf.org/html/rfc5988#page-6). 
               example: |
                        Link: <https://localhost:8080/users?page=3&per_page=100>; rel="next", <https://localhost/users?page=50&per_page=100>; rel="last"

  - searchable:
      queryParameters:
        q:
          description: Optional query parameter
          type: string
          required: false

schemas:
  - UserResponse: !include json/UserResponse.schema.json
  - UserListResponse: !include json/UserListResponse.schema.json
  - UserCreateRequest: !include json/UserCreateRequest.schema.json
  - UserUpdateRequest: !include json/UserUpdateRequest.schema.json

  - GroupResponse: !include  json/GroupResponse.schema.json
  - GroupListResponse: !include json/GroupListResponse.schema.json
  - GroupUpdateRequest: !include json/GroupUpdateRequest.schema.json
  - GroupCreateRequest: !include json/GroupCreateRequest.schema.json

  - RoleResponse: !include json/RoleResponse.schema.json
  - RoleListResponse: !include json/RoleListResponse.schema.json
  - RoleUpdateRequest: !include json/RoleUpdateRequest.schema.json
  - RoleCreateRequest: !include json/RoleCreateRequest.schema.json

  - TagResponse: !include json/TagResponse.schema.json
  - TagListResponse: !include json/TagListResponse.schema.json
  - TagUpdateRequest: !include json/TagUpdateRequest.schema.json
  - TagCreateRequest: !include json/TagCreateRequest.schema.json

  - NodeResponse: !include json/NodeResponse.schema.json
  - NodeUpdateRequest: !include json/NodeUpdateRequest.schema.json
  - NodeCreateRequest: !include json/NodeCreateRequest.schema.json

  - ObjectSchemaResponse: !include json/ObjectSchemaResponse.schema.json
  - ObjectSchemaListResponse: !include json/ObjectSchemaListResponse.schema.json
  - ObjectSchemaUpdateRequest: !include json/ObjectSchemaUpdateRequest.schema.json
  - ObjectSchemaCreateRequest: !include json/ObjectSchemaCreateRequest.schema.json

  - ProjectResponse: !include json/ProjectResponse.schema.json
  - ProjectListResponse: !include json/ProjectListResponse.schema.json
  - ProjectUpdateRequest: !include json/ProjectUpdateRequest.schema.json
  - ProjectCreateRequest: !include json/ProjectCreateRequest.schema.json
  
  - GenericMessageResponse: !include json/GenericMessageResponse.schema.json


#------------------------------------------------------------------------------
# User Verticle
#------------------------------------------------------------------------------
/users:
  displayName: Users
  is: [ localized ]
  description: The users rest endpoint is used for CRUD operations on user objects. 
  get:
    is: [ perm_listable, paged, searchable ]
    description: Retrieves a list of users.
    responses:
      200:
        body:
          application/json:
            schema: UserListResponse
            example: !include json/UserListResponse.example.json


  post:
    description: Create new user.
    body:
      application/json:
        schema: UserCreateRequest
        example: !include json/UserCreateRequest.example.json
    responses:
      200:
        body:
          application/json:
            schema: UserResponse
            example: !include json/UserResponse.example.json


  /{uuid}:
    get:
      is: [ perm_listable ]
      description: Retrieves a single user with the given uuid.
      responses:
        200:
          body:
            application/json:
              schema: UserResponse
              example: !include json/UserResponse.example.json
    put:
      description: Updates the user with the given uuid.
      body:
          application/json:
              schema: UserUpdateRequest
              example: !include json/UserUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: UserResponse
              example: !include json/UserResponse.example.json
    delete:
      description: Deletes the user with the given uuid.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json
    /groups/{uuid}:
      put:
        description: Add the user with the given uuid to the group.
      delete:
        description: Remove the user with the given uuid from the group.



#------------------------------------------------------------------------------
# Role Verticle
#------------------------------------------------------------------------------
/roles:
  is: [ localized ]
  displayName: Roles
  get:
    is: [ paged, searchable, perm_listable ]
    description: Retrieves a list of roles.
    responses:
      200:
        body:
          application/json:
            schema: RoleListResponse
            example: !include json/RoleListResponse.example.json
  post:
    description: Create a new role.
    body:
      application/json:
        schema: RoleCreateRequest
        example: !include json/RoleCreateRequest.example.json
    responses:
      200:
        body:
          application/json:
            schema: RoleResponse
            example: !include json/RoleResponse.example.json

  /{uuid}:
    get:
      is: [ perm_listable ]
      description: Retrieves a single role with the given uuid.
      responses:
        200:
          body:
            application/json:
              schema: RoleResponse
              example: !include json/RoleResponse.example.json
    put:
      description: Updates a single role with the given uuid.
      body:
        application/json:
          schema: RoleUpdateRequest
          example: !include json/RoleUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: RoleResponse
              example: !include json/RoleResponse.example.json
    delete:
      description: Deletes a single role with the given uuid.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json
    /groups/{uuid}:
      put:
        description: Add the role to the group.
        responses:
          200:
            body:
              application/json:
                schema: GenericMessageResponse
                example: !include json/GenericMessageResponse.example.json
      delete:
        description: Remove the role from the group.
        responses:
          200:
            body:
              application/json:
                schema: GenericMessageResponse
                example: !include json/GenericMessageResponse.example.json
    /chmod/{uuid}:
      put:
        description: |
          Add role permissions to the given entity. TODO: Add info about recursion and handle bitmark like permission flags.
      delete:
        description: |
          Remove role permissions from the given entity. TODO: Add info about recursion and handle bitmark like permission flags. 


#------------------------------------------------------------------------------
# Group Verticle
#------------------------------------------------------------------------------
/groups:
  is: [ localized, sortable, nested ]
  displayName: Groups
  get: 
    is: [ paged, searchable, perm_listable ]
    description: Retrieves a list of groups.
    responses:
      200:
        body:
          application/json:
            schema: GroupListResponse
            example: !include json/GroupListResponse.example.json
  post:
    description: Create a new group.
    body:
        application/json:
            schema: GroupCreateRequest
            example: !include json/GroupCreateRequest.example.json
    responses:
      200:
        body:
          application/json:
            schema: GroupResponse
            example: !include json/GroupResponse.example.json

  /{uuid}:
    is: [ localized, sortable, nested ]
    get:
      description: Retrieves a single group with the given uuid.
      responses:
        200:
          body:
            application/json:
              schema: GroupResponse
              example: !include json/GroupResponse.example.json
    put:
      description: Updates a single group with the given uuid.
      body:
        application/json:
          schema: GroupUpdateRequest
          example: !include json/GroupUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: GroupResponse
              example: !include json/GroupResponse.example.json
    delete:
      description: Deletes a single group with the given uuid.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json
    /users/{uuid}:
      put:
        description: Add the user with the given uuid to the group.
        responses:
          200:
            body:
              application/json:
                schema: GenericMessageResponse
                example: !include json/GenericMessageResponse.example.json
      delete:
        description: Remove the user with the given uuid from the group.
        responses:
          200:
            body:
              application/json:
                schema: GenericMessageResponse
                example: !include json/GenericMessageResponse.example.json
    /groups/{uuid}:
      put:
        description: Add the group with the given uuid to the group.
        responses:
          200:
            body:
              application/json:
                schema: GenericMessageResponse
                example: !include json/GenericMessageResponse.example.json
      delete:
        description: Remove the group with the given uuid from the group.
        responses:
          200:
            body:
              application/json:
                schema: GenericMessageResponse
                example: !include json/GenericMessageResponse.example.json


#------------------------------------------------------------------------------
# Project Verticle
#------------------------------------------------------------------------------
/projects:
  is: [ localized ]
  displayName: Projects
  get:
    is: [ paged, searchable, sortable, perm_listable ]
    description: Retrieves a list of projects.
    responses:
      200:
        body:
          application/json:
            schema: ProjectListResponse
            example: !include json/ProjectListResponse.example.json
      400:
        description: Bad Request
      500:
        description: Internal Server Error
  post:
    description: Create a new project.
    body:
      application/json:
        schema: ProjectCreateRequest
        example: !include json/ProjectCreateRequest.example.json
    responses:
      200:
        body:
          application/json:
            schema: ProjectResponse
            example: !include json/ProjectResponse.example.json

  /{uuid}:
    is: [ localized ]
    get:
      is: [ perm_listable ]
      description: Retrieves the project with the given uuid.
      body:
        application/json:
          schema: ProjectResponse
          example: !include json/ProjectResponse.example.json
    put:
      description: Update the project with the given uuid.
      body:
        application/json:
          schema: ProjectUpdateRequest
          example: !include json/ProjectUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: ProjectResponse
              example: !include json/ProjectResponse.example.json
    delete:
      description: Deletes the project with the given uuid.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json

#------------------------------------------------------------------------------
# Schema Verticle
#------------------------------------------------------------------------------
/schemas:
  is: [ localized ]
  displayName: Schemas
  get:
    is: [ paged , perm_listable ]
    description: Retrieves a list of object schemas.
    responses:
      200:
        body:
          application/json:
            example: !include json/ObjectSchemaListResponse.example.json
      400:
        description: Bad Request
      500:
        description: Internal Server Error
  post:
    description: Create the schema.
    body:
      application/json:
        schema: ObjectSchemaCreateRequest
        example: !include json/ObjectSchemaCreateRequest.example.json
    responses:
      200:
        body:
          application/json:
            example: !include json/ObjectSchemaResponse.example.json

  /{uuid}:
    is: [ localized ]
    get:
      is: [ perm_listable ]
      description: Retrieves the schema with the given uuid.
      responses:
        200:
          body:
            application/json:
              schema: ObjectSchemaResponse
              example: !include json/ObjectSchemaResponse.example.json
    put: 
      description: Updates the schema with the given uuid.
      body:
        application/json:
          schema: ObjectSchemaUpdateRequest
          example: !include json/ObjectSchemaUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              example: !include json/ObjectSchemaResponse.example.json
    delete:
      description: Deletes the schema with the given uuid.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json
    /projects/{uuid}:
      post:
        description: Add the schema to the project.
        responses:
          200:
            body:
              application/json:
                schema: GenericMessageResponse
                example: !include json/GenericMessageResponse.example.json
      delete:
        description: Remove the schema from the project.
        responses:
          200:
            body:
              application/json:
                schema: GenericMessageResponse
                example: !include json/GenericMessageResponse.example.json


#------------------------------------------------------------------------------
# Node Verticle
#------------------------------------------------------------------------------
/{project_name}/nodes:
  displayName: Nodes
  /:
    get: 
      is: [ localized, sortable, nested, paged ]
      description: Load all nodes.
      responses:
        200:
          body:
            application/json:
              schema: NodeListResponse
              example: !include json/NodeListResponse.example.json
    post:
      description: Create a new node.
      body:
        application/json:
          schema: NodeCreateRequest
          example: !include json/NodeCreateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: NodeResponse
              example: !include json/NodeResponse.example.json
  /{uuid}:
    is: [ localized, sortable, nested, perm_listable ]
    uriParameters:
      uuid:
        description: Uuid of a single node.
        type: string
    get:
      description: Retrieves the node with the given uuid.
      queryParameters:
        lang:
          description: Filter the languages in the form of a list containing [IETF language tags](http://en.wikipedia.org/wiki/IETF_language_tag) which are separated by comma.
          example: /{project_name}/nodes/?lang=de-DE,en-US
        update:
          description: The node will be locked when the *update* parameter is set to true.
          example: /{project_name}/nodes/?update=true
      responses:
        200:
          body:
            application/json:
              schema: NodeResponse
              example: !include json/NodeResponse.example.json
    put:
      description: Updates the node with the given uuid.
      body:
        application/json:
          schema: NodeUpdateRequest
          example: !include json/NodeUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: NodeResponse
              example: !include json/NodeResponse.example.json
        423:
    delete:
      description: Deletes the node with the given uuid.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json
        423:
    /bin/{name}:
      get:
        description: Load the binary property value.
      put: 
        description: Update the binary property value.
    /tags:
      get:
        description: Load the tags that tag the node.

#------------------------------------------------------------------------------
# Tag Verticle
#------------------------------------------------------------------------------
/{project_name}/tags:
  displayName: Tags
  uriParameters:
    project_name:
      description: Name of the project.
      type: string

  /:
    get:
      is: [ localized, sortable, nested, paged ]
      description: Load all tags of the project.
      responses:
        200:
          body:
            application/json:
              example: !include json/TagListResponse.example.json
    post:
      description: Create a new tag.
      body:
        application/json:
          schema: TagCreateRequest
          example: !include json/TagCreateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: TagResponse
              example: !include json/TagResponse.example.json

  /{uuid}:
    is: [ perm_listable ]
    uriParameters:
      uuid:
        description: | 
             The uuid of a single tag.
        type: string
    get:
      is: [ localized, sortable, nested ]
      description: Load the tag with the given uuid.
      queryParameters:
        depth: 
          description: Determines the depth of traversal for fetching nested tags.
      responses:
        200:
          body:
            application/json:
              schema: TagResponse
              example: !include json/TagResponse.example.json
    put:
      description: Update the tag with the given path.
      body:
        application/json:
          schema: TagUpdateRequest
          example: !include json/TagUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: TagResponse
              example: !include json/TagResponse.example.json
    delete:
      description: Delete the tag with the given path.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json
    /tags:
      get: 
        description: Load all tags which were used for tagging.
      post:
        description: Tag the tag.
      delete:
        description: Untag the tag.
    /children:
      get:
        description: Load a list of children.
    /bin/{name}:
      get:
        description: Load the binary property value.
      put: 
        description: Update the binary property value.


#------------------------------------------------------------------------------
# WebRoot Verticle
#------------------------------------------------------------------------------

/{project_name}/webroot:
  is: [ localized ]
  displayName: WebRoot
  /{path}:
    is: [ localized, sortable, nested, perm_listable ]
    uriParameters:
      path:
        description: Path to a node.
        type: string
    get:
      description: Retrieves the node with the given path.
      queryParameters:
        lang:
          description: Filter the languages in the form of a list containing [IETF language tags](http://en.wikipedia.org/wiki/IETF_language_tag) which are separated by comma.
          example: /{project_name}/nodes/?lang=de-DE,en-US
        update:
          description: The node will be locked when the *update* parameter is set to true.
          example: /{project_name}/nodes/?update=true
      responses:
        200:
          body:
            application/json:
              schema: NodeResponse
              example: !include json/NodeResponse.example.json

#------------------------------------------------------------------------------
# Search Verticle
#------------------------------------------------------------------------------
/{project_name}/search:
  is: [ localized ]
  displayName: Project Search
  get:
    description: Query for various objects.

/search:
  is: [ localized ]
  displayName: Global Search
  get:
    description: Query for various objects.



#------------------------------------------------------------------------------
# Navigation Verticle
#------------------------------------------------------------------------------
/{project_name}/navigation:
  is: [ localized ]
  displayName: Navigation
  get:
    description: Return the navigation.

#------------------------------------------------------------------------------
# Copy Verticle
#------------------------------------------------------------------------------
/copy/{uuid}/to/{uuid}:
  displayName: Copy
  put:
    description: Copy the object to the second object. Include all nested objects during this process. (TODO enhance documentation).
    

#------------------------------------------------------------------------------
# Move Verticle
#------------------------------------------------------------------------------
/move/{uuid}/to/{uuid}:
  displayName: Move
  put:
    description: Move entities.

#------------------------------------------------------------------------------
# Admin Verticle
#------------------------------------------------------------------------------
/admin:
  displayName: Admin

  /neo4j/restart:
    is: [ localized ]
    description: Restart the neo4vertx verticle.
    get:

  /services/{mavenCoordinates}:
    is: [ localized ]
    uriParameters:
      mavenCoordinates:
        description: | 
                Maven coordinates for the service. (E.g.: com.gentics.mesh:tagcloud:1.0.1)
        type: string
    post:
      description: Deploy a vertx maven service.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json
    delete:
      description: Undeploy a previouly deployed vertx maven server.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json

  /verticles/{class}:
    is: [ localized ]
    uriParameters:
      class:
        description: Name of the verticle class.
        type: string
    post:
      description: Deploy a verticle with the given class.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json
    delete:
      description: Undeploy a verticle with the given class.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json

  /backup:
    is: [ localized ]
    get:
      description: Invoke the live backup process.
      responses:
        200:
          body:
            application/json:
              schema: GenericMessageResponse
              example: !include json/GenericMessageResponse.example.json
