
= Building blocks

Gentics Mesh provides a various building blocks which can be used in order to setup your content structure. Below are elements which can be used to create your project datastructure.

image:overview.png[]

== Users

Users can log into Gentics Mesh in order to interact with other elements.

Endpoint: ```/api/v1/users/:uuid```

include::examples/models/UserResponse.adoc[]

*Response Sample*

[source,json]
----
include::examples/api/response/api/v1/users/\{userUuid\}/200/example.json[]
----

== Groups

Groups are used to organize users. Roles can be assigned to groups. A user in a group with roles inherits those roles and the permissions that are bound to those roles.
Groups can't be nested.

Endpoint: ```/api/v1/groups/:uuid```

include::examples/models/GroupResponse.adoc[]

*Response Sample*

[source,json]
----
include::examples/api/response/api/v1/groups/\{groupUuid\}/200/example.json[]
----

== Roles

Roles are used to assign permissions to objects. A role can be assigned to multiple groups.
Users can only assign permissions to roles to which they have access.
Roles can't be nested.

Endpoint: ```/api/v1/roles/:uuid```

include::examples/models/RoleResponse.adoc[]

*Response Sample*

[source,json]
----
include::examples/api/response/api/v1/roles/\{roleUuid\}/200/example.json[]
----

== Projects

A project is the base element your content structure which includes tagfamilies and your node tree.
Schemas can be assigned to projects in order to allow creation of nodes which use one of the assigned schemas.

Endpoint: ```/api/v1/projects/:uuid```

include::examples/models/ProjectResponse.adoc[]

*Response Sample*

[source,json]
----
include::examples/api/response/api/v1/projects/\{projectUuid\}/200/example.json[]
----

== Tag Families

Tag families are base elements for tags which are bound to single project.
Tag families can't be nested.

Endpoint: ```/api/v1/:projectName/tagfamilies/:uuid```

include::examples/models/TagFamilyResponse.adoc[]

*Response Sample*

[source,json]
----
include::examples/api/response/api/v1/\{project\}/tagFamilies/\{tagFamilyUuid\}/200/example.json[]
----

== Tags

Tags can be added to nodes. Tags can not be hierarchically structured.

Endpoint: ```/api/v1/:projectName/tagFamilies/:uuid/tags```

include::examples/models/TagResponse.adoc[]

*Response Sample*

[source,json]
----
include::examples/api/response/api/v1/\{project\}/tagFamilies/\{tagFamilyUuid\}/tags/\{tagUuid\}/200/example.json[]
----

== Nodes

Nodes are the main structural building blocks for your content. You may create different schemas to create multiple types of nodes.
Nodes can be hierarchically structured if the schema is allowing this. The type of a node is always defined by the assigned schema. Nodes can be tagged by any number of tags.

NOTE: It is important to understand that a node is just a container for language variants. These language variants will store your fields. 
You can query individual language variants by appending the ```?lang``` request parameter. The ```language``` json property within an update or create request will be used to identify which language variant should be created or updated.

Endpoint: ```/api/v1/:projectName/nodes/:uuid?lang=de,en&version=draft&release=winter2016```

include::examples/models/NodeResponse.adoc[]

*Response Sample*

[source,json]
----
include::examples/api/response/api/v1/\{project\}/nodes/\{nodeUuid\}/200/example.json[]
----

=== Query Parameters

[options="header",cols="2*"]
|======

| Name
| Description

| lang
| The lang query parameter can be used to retrieve a node in a particular language.

| role
| The role query parameter may be used in order to add permission information related to the specified role to the response.
This may be useful when you are logged in as admin but you want to retrieve the editor role permissions on a given node. When used, the response will include the ```rolePerms``` property which lists the permissions for the specified role.
Endpoint: ```/api/v1/:projectName/nodes?role=:roleUuid```

| release
| The specific ```release``` to be used for loading the node.

| version
| The version of the node's language variant. E.g.: 0.1, 1.0, draft, published 

|======

=== Creation

It is mandatory to set the ```language``` and ```parentNodeUuid``` parameter within the JSON request when sending a create request via POST to the nodes endpoint.

Depending on the used schema it may also be mandatory to add fields to the request which are flagged as mandatory.

[source,json]
----
include::examples/api/request/api/v1/\{project\}/nodes/request-body.json[]
----

=== Updating

It is mandatory to set the ```language``` and ```version``` parameter within the JSON request. Updating may fail if a segment path conflict was detected. The request could also fail if a unresolvable version conflict has been detected. See versioning for more information.

== Schemas

A schema defines the type and name of each field for a node. You can think of a schema as a blueprint for new nodes.

Endpoint: ```/api/v1/schemas/:uuid```

[source,json]
----
include::examples/api/response/api/v1/schemas/\{schemaUuid\}/200/example.json[]
----

=== Configuration properties

The following configuration properties may be specified:

* **`container`** Set to `true` to indicate that this schema can contain child nodes. This will cause the response
object for such nodes to have a `childrenInfo` property.
* **`displayField`** Used to specify which field (as defined in the "fields" list) should be considered the title for
the purpose of displaying a list of nodes. The value must be a string which corresponds to the name of one of the
schema's fields, and additionally that field must not be of type "list", "node".

=== Schema Field

A field is defined by an object which must have the following properties:

* **`name`** A unique name to identify the field
* **`type`** The type of data to be stored in this field.

The following optional properties may be applied to any type of field:

* **`required`** If `true`, this field may not be left empty.
* **`label`** A human-readable label for the field to be used as a form label in the admin UI. If not defined, the "name" field would be used.

In addition to the above, certain types expose additional properties with which to configure the field. Such additional
properties are defined in the [Types](#types) section.

=== Schema Field Types

[options="header",cols="3*"]
|======
| Name
| Type Key
| Description

| String
| ```string```
| A string field type may have an ```allow``` property which acts as a white list for allowed field values

| HTML
| ```html```
| A html field type does not have any special configuration settings at this point of time.

| Number
| ```number```
| A number field type has three optional config properties: "min" is the lowest permitted value, "max" is the greatest permitted
value, and "step" is the size of the permitted increment in value. For example:

| Date
| ```date```
| The date field type stores a date in a epoch date format.

| Boolean
| ```boolean```
| A boolean field type does not have any special config settings.

| Binary
| ```binary```
| The binary field type stores binary and binary related meta data (e.g: filename, sha512sum, image width and height, mimetype..). Binary fields within nodes can be updated using the fields API.

| Node
| ```node```
| A node field type must have an ```allow``` property which acts as a white list for schemas which may be used. If ```allow``` is an
empty array, any type of node may be used.

| Micronode
| ```micronode```
| A micronode field type stores a single micronode. A micronode is similar to a node but it is directly bound to the node and thus is not accessible within the project node tree structure. Typical usecases for micronodes are galleries, location boxes, vcards.

| List
| ```list```
| A list field **must** be typed via the ```listType``` property. Possible listTypes are ```node``` ```boolean``` ```string``` ```html``` ```number``` ```date``` ```micronode```
|======

=== Media type whitelist for binary schemas

Binary schemas should be able to specify which media types (aka MIME type or Content-type) they may contain. This would be done by means of a whitelist which is an array of multiple regular expressions.

Since the JSON standard does not have a special regex type, it would need to be specified as a string, but would actually be converted to and interpreted as a regex by Gentics Mesh.
