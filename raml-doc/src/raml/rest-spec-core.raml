#%RAML 0.8
title: preview-spec-core
version: v0.1
baseUri: http://localhost:8080/
securedBy: [oauth_2_0]

securitySchemes:
  - basic:
      type: Basic Authentication
  - oauth_2_0:
      description: |
        OAuth2 is a protocol that lets external apps request authorization to private
        details. This is preferred over Basic Authentication because tokens can be limited to specific
        types of data, and can be revoked by users at any time.
      type: OAuth 2.0
      describedBy:
        headers:
          Authorization:
            description: |
              Used to send a valid OAuth 2 access token. Do not use together with
              the "access_token" query string parameter.
            type: string
        queryParameters:
          access_token:
            description: |
              Used to send a valid OAuth 2 access token. Do not use together with
              the "Authorization" header
            type: string
        responses:
          404:
            description: Unauthorized
      settings:
        authorizationUri: https://localhost:8080/login/oauth/authorize
        accessTokenUri: https://localhost:8080/login/oauth/access_token
        authorizationGrants: [ code ]

traits:
  - localized:
      headers:
        Accept-Language:
          description: The response messages are localized according to the set header value. English and german translations can be provided. Unsupported languages will fallback to english.

  - paged:
      queryParameters:
        page:
          description: The page to be displayed
          type: number
        per_page: 
          description: The amount of items per page
          type: number

  - pagedHeader:
      responses:
        200:
          headers:
             Link:
               description: |
                        A link header will be provided accoring to [RFC5988](http://tools.ietf.org/html/rfc5988#page-6). 
               example: |
                        Link: <https://localhost:8080/users?page=3&per_page=100>; rel="next", <https://localhost/users?page=50&per_page=100>; rel="last"

  - searchable:
      queryParameters:
        q:
          description: Optional query parameter
          type: string
          required: false

schemas:
  - UserResponse: !include json/UserResponse.schema.json
  - UserListResponse: !include json/UserListResponse.schema.json
  - UserCreateRequest: !include json/UserCreateRequest.schema.json
  - UserUpdateRequest: !include json/UserUpdateRequest.schema.json

  - GroupResponse: !include  json/GroupResponse.schema.json
  - GroupListResponse: !include json/GroupListResponse.schema.json
  - GroupUpdateRequest: !include json/GroupUpdateRequest.schema.json
  - GroupCreateRequest: !include json/GroupCreateRequest.schema.json

  - RoleResponse: !include json/RoleResponse.schema.json
  - RoleListResponse: !include json/RoleListResponse.schema.json
  - RoleUpdateRequest: !include json/RoleUpdateRequest.schema.json
  - RoleCreateRequest: !include json/RoleCreateRequest.schema.json

  - TagResponse: !include json/TagResponse.schema.json
  - TagUpdateRequest: !include json/TagUpdateRequest.schema.json
  - TagCreateRequest: !include json/TagCreateRequest.schema.json

  - ContentResponse: !include json/ContentResponse.schema.json
  - ContentUpdateRequest: !include json/ContentUpdateRequest.schema.json
  - ContentCreateRequest: !include json/ContentCreateRequest.schema.json

  - ObjectSchemaResponse: !include json/ObjectSchemaResponse.schema.json
  - ObjectSchemaListResponse: !include json/ObjectSchemaListResponse.schema.json
  - ObjectSchemaUpdateRequest: !include json/ObjectSchemaUpdateRequest.schema.json
  - ObjectSchemaCreateRequest: !include json/ObjectSchemaCreateRequest.schema.json

  - ProjectResponse: !include json/ProjectResponse.schema.json
  - ProjectListResponse: !include json/ProjectListResponse.schema.json
  - ProjectUpdateRequest: !include json/ProjectUpdateRequest.schema.json
  - ProjectCreateRequest: !include json/ProjectCreateRequest.schema.json


/users:
  is: [ localized ]
  displayName: Users
  get:
    is: [ paged, searchable ]
    description: Retrieves a list of **users**

    responses:
      200:
        body:
          application/json:
            schema: UserListResponse
            example: !include json/UserListResponse.example.json


  post:
    description: Create new user
    body:
      application/json:
        schema: UserCreateRequest
        example: !include json/UserCreateRequest.example.json
    responses:
      200:
        body:
          application/json:
            schema: UserResponse
            example: !include json/UserResponse.example.json


  /{username}:
    is: [ localized ]
    get:
      description: Retrieves a **single user** with the given username
      responses:
        200:
          body:
            application/json:
              schema: UserResponse
              example: !include json/UserResponse.example.json
    put:
      description: Updates the **user** with the given username
      body:
        application/json:
            schema: UserUpdateRequest
            example: !include json/UserUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: UserResponse
              example: !include json/UserResponse.example.json
    delete:
      description: Deletes the **user** with the given username

  /urn:uuid:{uuid}:
    is: [ localized ]
    get:
      description: Retrieves a **single role** with the given uuid
      responses:
        200:
          body:
            application/json:
              schema: UserResponse
              example: !include json/UserResponse.example.json
      
    put:
      description: Updates the **user** with the given uuid
      body:
          application/json:
              schema: UserUpdateRequest
              example: !include json/UserUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: UserResponse
              example: !include json/UserResponse.example.json
    delete:
      description: Deletes the **user** with the given uuid
    

/roles:
  is: [ localized ]
  displayName: Roles
  get:
    is: [ paged, searchable ]
    description: Retrieves a list of roles
    responses:
      200:
        body:
          application/json:
            schema: RoleListResponse
            example: !include json/RoleListResponse.example.json
  post:
    description: Create a new role
    body:
      application/json:
        schema: RoleCreateRequest
        example: !include json/RoleCreateRequest.example.json
    responses:
      200:
        body:
          application/json:
            schema: RoleResponse
            example: !include json/RoleResponse.example.json



  /{name}:
    is: [ localized ]
    get:
      description: Retrieves a **single role** with the given name
      responses:
        200:
          body:
            application/json:
              schema: RoleResponse
              example: !include json/RoleResponse.example.json
    put:
      description: Updates a **single role** with the given name
      body:
        application/json:
          schema: RoleUpdateRequest
          example: !include json/RoleUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: RoleResponse
              example: !include json/RoleResponse.example.json
    delete:
      description: Deletes a **single role** with the given name

  /urn:uuid:{uuid}:
    is: [ localized ]
    get:
      description: Retrieves a **single role** with the given uuid
      responses:
        200:
          body:
            application/json:
              schema: RoleResponse
              example: !include json/RoleResponse.example.json
    put:
      description: Updates a **single role** with the given uuid
      body:
        application/json:
          schema: RoleUpdateRequest
          example: !include json/RoleUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: RoleResponse
              example: !include json/RoleResponse.example.json
    delete:
      description: Deletes a **single role** with the given uuid


/groups:
  is: [ localized ]
  displayName: Groups
  get: 
    is: [ paged, searchable ]
    description: Retrieves a **list of groups**
    responses:
      200:
        body:
          application/json:
            schema: GroupListResponse
            example: !include json/GroupListResponse.example.json
  post:
    description: Create a new group
    body:
        application/json:
            schema: GroupCreateRequest
            example: !include json/GroupCreateRequest.example.json
    responses:
      200:
        body:
          application/json:
            schema: GroupResponse
            example: !include json/GroupResponse.example.json

  /{name}:
    is: [ localized ]
    get:
      description: Retrieves a **single group** with the given name
      responses:
        200:
          body:
            application/json:
              schema: GroupResponse
              example: !include json/GroupResponse.example.json
    put:
      description: Updates a **single group** with the given name
      body:
        application/json:
          schema: GroupUpdateRequest
          example: !include json/GroupUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: GroupResponse
              example: !include json/GroupResponse.example.json
    delete:
      description: Deletes a **single group** with the given name
      responses:
        200:
          body:
            application/json:
              schema: GroupResponse
              example: !include json/GroupResponse.example.json
  
  /urn:uuid:{uuid}:
    is: [ localized ]
    get:
      description: Retrieves a **single group** with the given uuid
      responses:
        200:
          body:
            application/json:
              schema: GroupResponse
              example: !include json/GroupResponse.example.json
    put:
      description: Updates a **single group** with the given uuid
      body:
        application/json:
          schema: GroupUpdateRequest
          example: !include json/GroupUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: GroupResponse
              example: !include json/GroupResponse.example.json
    delete:
      description: Deletes a **single group** with the given uuid


/projects:
  is: [ localized ]
  displayName: Projects
  get:
    is: [ paged, searchable ]
    description: Retrieves a list of projects
    responses:
      200:
        body:
          application/json:
            schema: ProjectListResponse
            example: !include json/ProjectListResponse.example.json
      400:
        description: Bad Request
      500:
        description: Internal Server Error
  post:
    description: Create a new project
    body:
      application/json:
        schema: ProjectCreateRequest
        example: !include json/ProjectCreateRequest.example.json
    responses:
      200:
        body:
          application/json:
            schema: ProjectResponse
            example: !include json/ProjectResponse.example.json


  /{name}:
    is: [ localized ]
    get:
      description: Retrieves the **project** with the given name
      responses:
        200:
          body:
            application/json:
              schema: ProjectResponse
              example: !include json/ProjectResponse.example.json
    put:
      body:
        application/json:
          schema: ProjectUpdateRequest
          example: !include json/ProjectUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: ProjectResponse
              example: !include json/ProjectResponse.example.json
    delete:

  /urn:uuid:{uuid}:
   get:
    description: Retrieves the **project** with the given uuid
   put:
      body:
        application/json:
          schema: ProjectUpdateRequest
          example: !include json/ProjectUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: ProjectResponse
              example: !include json/ProjectResponse.example.json
   delete:

/{project_name}/contents:
  displayName: Contents
  /{path}:
    is: [ localized ]
    uriParameters:
      path:
        description: | 
             Path to the content
        type: string
    get:
      description: Retrieves the **content** with the given path
      queryParameters:
        lang:
          description: Filter the languages in the form of a list containing [IETF language tags](http://en.wikipedia.org/wiki/IETF_language_tag) which are separated by comma.
          example: /{project_name}/contents/?lang=de-DE,en-US
        for_update:
          description: The content will be locked when the *for_update* parameter is set to true.
          example: /{project_name}/contents/?for_update=true
      responses:
        200:
          body:
            application/json:
              schema: ContentResponse
              example: !include json/ContentResponse.example.json
    post:
      description: Creates the **content** with the given path
      body:
        application/json:
          schema: ContentCreateRequest
          example: !include json/ContentCreateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: ContentResponse
              example: !include json/ContentResponse.example.json
        423:
    put:
      description: Updates the **content** with the given path
      body:
        application/json:
          schema: ContentUpdateRequest
          example: !include json/ContentUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: ContentResponse
              example: !include json/ContentResponse.example.json
        423:
    delete:
      description: Deletes the **content** with the given path
      responses:
        200:
        423:

  /urn:uuid:{uuid}:
    is: [ localized ]
    get:
      queryParameters:
        lang:
          description: Filter the languages in the form of a list containing [IETF language tags](http://en.wikipedia.org/wiki/IETF_language_tag) which are separated by comma.
          example: /{project_name}/contents/?lang=de-DE,en-US
        for_update:
          description: The content will be locked when the *for_update* parameter is set to true.
          example: /{project_name}/contents/?for_update=true
      responses:
        200:
          body:
            application/json:
              schema: ContentResponse
              example: !include json/ContentResponse.example.json
    put:
      body:
        application/json:
          schema: ContentUpdateRequest
          example: !include json/ContentUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: ContentResponse
              example: !include json/ContentResponse.example.json
    delete:


/{project_name}/tags/:
  displayName: Tags

  /{path}:
    is: [ localized ]
    get:
      description: Load the tag with the given path
      responses:
        200:
          body:
            application/json:
              schema: TagResponse
              example: !include json/TagResponse.example.json
    post:
      description: Create the **tag** with the given path
      body:
        application/json:
          schema: TagCreateRequest
          example: !include json/TagCreateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: TagResponse
              example: !include json/TagResponse.example.json
    put:
      description: Update the **tag** with the given path
      body:
        application/json:
          schema: TagUpdateRequest
          example: !include json/TagUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: TagResponse
              example: !include json/TagResponse.example.json
    delete:
      description: Delete the **tag** with the given path

  /urn:uuid:{uuid}:
    is: [ localized ]
    get:
      description: Load the **tag** with the given uuid
      responses:
        200:
          body:
            application/json:
              schema: TagResponse
              example: !include json/TagResponse.example.json
    put:
      description: Update the **tag** with the given uuid
      body:
        application/json:
          schema: TagUpdateRequest
          example: !include json/TagUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: TagResponse
              example: !include json/TagResponse.example.json
    delete:
      description: Delete the **tag** with the given uuid


/{project_name}/search:
  is: [ localized ]
  displayName: Search
  get:

/{project_name}/types:
  is: [ localized ]
  displayName: Types
  get:
    is: [ paged ]
    description: Retrieves a **list of object types**
    responses:
      200:
        body:
          application/json:
            schema: ObjectSchemaListResponse
            example: !include json/ObjectSchemaListResponse.example.json
      400:
        description: Bad Request
      500:
        description: Internal Server Error
  post:
    description: Create the type
    body:
      application/json:
        schema: ObjectSchemaCreateRequest
        example: !include json/ObjectSchemaCreateRequest.example.json
    responses:
      200:
        body:
          application/json:
            schema: ObjectSchemaResponse
            example: !include json/ObjectSchemaResponse.example.json

  /{name}:
    is: [ localized ]
    get:
      description: Retrieves the **type** with the given name
      responses:
        200:
          body:
            application/json:
              schema: ObjectSchemaResponse
              example: !include json/ObjectSchemaResponse.example.json
    put:
      description: Updates the **type** with the given name
      body:
        application/json:
          schema: ObjectSchemaUpdateRequest
          example: !include json/ObjectSchemaUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: ObjectSchemaResponse
              example: !include json/ObjectSchemaResponse.example.json
    delete:
      description: Deletes the **type** with the given name

  /urn:uuid:{uuid}:
    is: [ localized ]
    get:
      description: Retrieves the **type** with the given uuid
      responses:
        200:
          body:
            application/json:
              schema: ObjectSchemaResponse
              example: !include json/ObjectSchemaResponse.example.json
    put: 
      description: Updates the **type** with the given uuid
      body:
        application/json:
          schema: ObjectSchemaUpdateRequest
          example: !include json/ObjectSchemaUpdateRequest.example.json
      responses:
        200:
          body:
            application/json:
              schema: ObjectSchemaResponse
              example: !include json/ObjectSchemaResponse.example.json
    delete:
      description: Deletes the **type** with the given uuid.

/{project_name}/binaries:
  displayName: Binaries

  /{path}:
    is: [ localized ]
    get:
      headers:
        Accept:
         description: Can be set to *application/json* or *application/octet-stream* 
                      to load either the json representation of the file or its binary contents.
      description: Load the **binary file** with the given path
    post: 
      description: Create the **binary file** with the given path
    put:
      description: Update the **binary file** with the given path
    delete:
      description: Delete the **binary file** with the given path

  /urn:uuid:{uuid}:
    is: [ localized ]
    get:
      description: Load the **binary file** with the given uuid
    put:
      description: Update the **binary file** with the given uuid
    delete:
      description: Delete the **binary file** with the given uuid


/{project_name}/navigation:
  is: [ localized ]
  displayName: Navigation
  get:


/admin:
  displayName: Admin

  /neo4vertx/restart:
    is: [ localized ]
    description: Restart the neo4vertx verticle
    get:

  /services/{mavenCoordinates}:
    is: [ localized ]
    uriParameters:
      mavenCoordinates:
        description: | 
                Maven coordinates for the service. (E.g.: com.gentics.cailun:tagcloud:1.0.1)
        type: string
    post:
      description: Deploy a vertx maven service
    delete:
      description: Undeploy a previouly deployed vertx maven server

  /verticles/{class}:
    is: [ localized ]
    uriParameters:
      class:
        description: Name of the verticle class
        type: string
    post:
      description: Deploy a verticle with the given class
    delete:
      description: Undeploy a verticle with the given class

  /backup:
    is: [ localized ]
    get:
      description: Invoke the live backup process
